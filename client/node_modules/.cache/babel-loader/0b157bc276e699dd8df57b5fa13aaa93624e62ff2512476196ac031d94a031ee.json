{"ast":null,"code":"import api from \"../api\";\nexport default new class ServiceService {\n  async createService(credentials) {\n    if (!credentials.technology || !credentials.material || !credentials.images) {\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', credentials.name);\n    formData.append('desc', credentials.desc);\n    for (let i = 0; i < credentials.images.length; i++) {\n      formData.append('images', credentials.images[i]);\n    }\n    try {\n      return await api.post('/service', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      alert('Failed to create service');\n    }\n  }\n}();","map":{"version":3,"names":["api","ServiceService","createService","credentials","technology","material","images","formData","FormData","append","name","desc","i","length","post","headers","error","console","alert"],"sources":["/Users/Elijah/Desktop/3dProject/client/src/service/service-service.ts"],"sourcesContent":["import api from \"../api\";\nimport { Service, ServiceCredentials } from \"./service-types\";\n\nexport default new class ServiceService {\n    async createService (credentials: ServiceCredentials) {\n        if(!credentials.technology || !credentials.material || !credentials.images) {\n            return;\n        }\n\n        const formData = new FormData();\n\n        formData.append('name', credentials.name);\n        formData.append('desc', credentials.desc);\n        for (let i = 0; i < credentials.images.length; i++) {\n            formData.append('images', credentials.images[i]);\n        }\n\n        try {\n            return await api.post('/service', formData, {\n              headers: { 'Content-Type': 'multipart/form-data' },\n            });\n          } catch (error) {\n            console.error(error);\n            alert('Failed to create service');\n          }\n    }\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,QAAQ;AAGxB,eAAe,IAAI,MAAMC,cAAc,CAAC;EACpC,MAAMC,aAAaA,CAAEC,WAA+B,EAAE;IAClD,IAAG,CAACA,WAAW,CAACC,UAAU,IAAI,CAACD,WAAW,CAACE,QAAQ,IAAI,CAACF,WAAW,CAACG,MAAM,EAAE;MACxE;IACJ;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,WAAW,CAACO,IAAI,CAAC;IACzCH,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,WAAW,CAACQ,IAAI,CAAC;IACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,WAAW,CAACG,MAAM,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAChDL,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEN,WAAW,CAACG,MAAM,CAACM,CAAC,CAAC,CAAC;IACpD;IAEA,IAAI;MACA,OAAO,MAAMZ,GAAG,CAACc,IAAI,CAAC,UAAU,EAAEP,QAAQ,EAAE;QAC1CQ,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBE,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACN;AACJ,CAAC,CAAD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}