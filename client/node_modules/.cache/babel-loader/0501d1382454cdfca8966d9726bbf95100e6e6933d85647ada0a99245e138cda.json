{"ast":null,"code":"import api from '../api';\nimport { jwtDecode } from 'jwt-decode';\nexport default new class AuthService {\n  constructor() {\n    this.isAuthenticated = () => {\n      const token = localStorage.getItem('token');\n      return !!token;\n    };\n    this.getAuthHeader = () => {\n      const token = localStorage.getItem('token');\n      return token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n    };\n    // Запит для перевірки токена на сервері\n    this.validateToken = async () => {\n      try {\n        await api.get('/api/auth/validate', {\n          headers: this.getAuthHeader()\n        });\n        return true;\n      } catch (err) {\n        return false;\n      }\n    };\n    this.loginUser = async credentials => {\n      try {\n        const response = await api.post('/api/auth/login', credentials);\n        const token = response.data.token;\n\n        // Збереження токена в localStorage після успішного логіну\n        localStorage.setItem('token', token);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    };\n    this.getUserRole = () => {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      try {\n        const decoded = jwtDecode(token);\n        return decoded.role;\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return null;\n      }\n    };\n    this.register = async credentials => {\n      const token = localStorage.getItem('token'); // Припустимо, токен для аутентифікації зберігається в LocalStorage\n\n      const response = await api.post('/api/users', credentials, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    };\n  }\n}();","map":{"version":3,"names":["api","jwtDecode","AuthService","constructor","isAuthenticated","token","localStorage","getItem","getAuthHeader","Authorization","validateToken","get","headers","err","loginUser","credentials","response","post","data","setItem","error","getUserRole","decoded","role","console","register"],"sources":["/Users/Elijah/Desktop/3dProject/client/src/auth/auth-service.ts"],"sourcesContent":["import api from '../api';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface LoginResponse {\n    token: string;\n    role: string; // Повертаємо і роль\n}\n\ninterface RegistrationCredentials {\n    username: string,\n    email: string,\n    cell: string,\n    password: string\n}\n\nexport default new class AuthService {\n    isAuthenticated = (): boolean => {\n        const token = localStorage.getItem('token');\n        return !!token;\n    };\n\n    getAuthHeader = () => {\n        const token = localStorage.getItem('token');\n        return token ? { Authorization: `Bearer ${token}` } : {};\n    };\n\n    // Запит для перевірки токена на сервері\n    validateToken = async (): Promise<boolean> => {\n        try {\n            await api.get('/api/auth/validate', {\n                headers: this.getAuthHeader(),\n            });\n            return true;\n        } catch (err) {\n            return false;\n        }\n    };\n\n    loginUser = async (credentials: { email: string, password: string }): Promise<{ token: string, role: string }> => {\n        try {\n            const response = await api.post('/api/auth/login', credentials);\n            const token = response.data.token;\n\n            // Збереження токена в localStorage після успішного логіну\n            localStorage.setItem('token', token);\n\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    getUserRole = (): string | null => {\n        const token = localStorage.getItem('token');\n\n        if (!token) return null;\n\n        try {\n            const decoded: { role: string } = jwtDecode(token);\n            return decoded.role;\n        } catch (error) {\n            console.error('Error decoding token:', error);\n            return null;\n        }\n    };\n\n    \n\n    register = async (credentials: RegistrationCredentials): Promise<any> => {\n        const token = localStorage.getItem('token'); // Припустимо, токен для аутентифікації зберігається в LocalStorage\n\n        const response = await api.post('/api/users', credentials, {\n            headers: {\n            Authorization: `Bearer ${token}`,\n            },\n        });\n\n        return response.data;\n    }\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,QAAQ;AACxB,SAASC,SAAS,QAAQ,YAAY;AActC,eAAe,IAAI,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACjCC,eAAe,GAAG,MAAe;MAC7B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,CAAC,CAACF,KAAK;IAClB,CAAC;IAAA,KAEDG,aAAa,GAAG,MAAM;MAClB,MAAMH,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAOF,KAAK,GAAG;QAAEI,aAAa,EAAE,UAAUJ,KAAK;MAAG,CAAC,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED;IAAA,KACAK,aAAa,GAAG,YAA8B;MAC1C,IAAI;QACA,MAAMV,GAAG,CAACW,GAAG,CAAC,oBAAoB,EAAE;UAChCC,OAAO,EAAE,IAAI,CAACJ,aAAa,CAAC;QAChC,CAAC,CAAC;QACF,OAAO,IAAI;MACf,CAAC,CAAC,OAAOK,GAAG,EAAE;QACV,OAAO,KAAK;MAChB;IACJ,CAAC;IAAA,KAEDC,SAAS,GAAG,MAAOC,WAAgD,IAA+C;MAC9G,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;QAC/D,MAAMV,KAAK,GAAGW,QAAQ,CAACE,IAAI,CAACb,KAAK;;QAEjC;QACAC,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;QAEpC,OAAOW,QAAQ,CAACE,IAAI;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZ,MAAMA,KAAK;MACf;IACJ,CAAC;IAAA,KAEDC,WAAW,GAAG,MAAqB;MAC/B,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;MAEvB,IAAI;QACA,MAAMiB,OAAyB,GAAGrB,SAAS,CAACI,KAAK,CAAC;QAClD,OAAOiB,OAAO,CAACC,IAAI;MACvB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,IAAI;MACf;IACJ,CAAC;IAAA,KAIDK,QAAQ,GAAG,MAAOV,WAAoC,IAAmB;MACrE,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;MAE7C,MAAMS,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,YAAY,EAAEF,WAAW,EAAE;QACvDH,OAAO,EAAE;UACTH,aAAa,EAAE,UAAUJ,KAAK;QAC9B;MACJ,CAAC,CAAC;MAEF,OAAOW,QAAQ,CAACE,IAAI;IACxB,CAAC;EAAA;AACL,CAAC,CAAD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}