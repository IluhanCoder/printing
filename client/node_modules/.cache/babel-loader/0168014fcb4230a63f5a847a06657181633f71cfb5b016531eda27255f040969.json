{"ast":null,"code":"var _jsxFileName = \"/Users/Elijah/Desktop/3dProject/client/src/order/OrderStatusUpdate.tsx\";\nimport React from \"react\";\nimport api from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderStatusUpdate = ({\n  orderId,\n  currentStatus,\n  onStatusUpdated,\n  currentUserId,\n  ordererId,\n  executorId\n}) => {\n  const updateStatus = async newStatus => {\n    try {\n      const res = await api.patch(`/order/${orderId}/status`, {\n        status: newStatus\n      });\n      onStatusUpdated(res.data.order.status);\n    } catch (error) {\n      console.error(\"Error updating status\", error);\n    }\n  };\n  let actionButton = null;\n  let message = \"\";\n  if (currentStatus === \"pending\") {\n    if (currentUserId === executorId) {\n      actionButton = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(\"accepted\"),\n        children: \"Accept Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    } else {\n      message = \"Waiting for the service creator to accept the order.\";\n    }\n  } else if (currentStatus === \"accepted\") {\n    if (currentUserId === ordererId) {\n      actionButton = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(\"payed\"),\n        children: \"Mark as Payed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    } else {\n      message = \"Waiting for the orderer to mark the order as payed.\";\n    }\n  } else if (currentStatus === \"payed\") {\n    if (currentUserId === executorId) {\n      actionButton = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(\"sent\"),\n        children: \"Mark as Sent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    } else {\n      message = \"Waiting for the service creator to mark the order as sent.\";\n    }\n  } else if (currentStatus === \"sent\") {\n    if (currentUserId === ordererId) {\n      actionButton = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(\"recieved\"),\n        children: \"Mark as Recieved\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n    } else {\n      message = \"Waiting for the orderer to confirm receipt.\";\n    }\n  } else {\n    message = \"No further status updates available.\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update Order Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), actionButton ? actionButton : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c = OrderStatusUpdate;\nexport default OrderStatusUpdate;\nvar _c;\n$RefreshReg$(_c, \"OrderStatusUpdate\");","map":{"version":3,"names":["React","api","jsxDEV","_jsxDEV","OrderStatusUpdate","orderId","currentStatus","onStatusUpdated","currentUserId","ordererId","executorId","updateStatus","newStatus","res","patch","status","data","order","error","console","actionButton","message","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Elijah/Desktop/3dProject/client/src/order/OrderStatusUpdate.tsx"],"sourcesContent":["import React from \"react\";\nimport api from \"../api\";\n\ninterface OrderStatusUpdateProps {\n  orderId: string;\n  currentStatus: string;\n  onStatusUpdated: (newStatus: string) => void;\n  currentUserId: string;\n  ordererId: string;   // id of the user who made the order\n  executorId: string;  // id of the service creator (executor)\n}\n\nconst OrderStatusUpdate: React.FC<OrderStatusUpdateProps> = ({\n  orderId,\n  currentStatus,\n  onStatusUpdated,\n  currentUserId,\n  ordererId,\n  executorId,\n}) => {\n  const updateStatus = async (newStatus: string) => {\n    try {\n      const res = await api.patch(`/order/${orderId}/status`, { status: newStatus });\n      onStatusUpdated(res.data.order.status);\n    } catch (error) {\n      console.error(\"Error updating status\", error);\n    }\n  };\n\n  let actionButton = null;\n  let message = \"\";\n\n  if (currentStatus === \"pending\") {\n    if (currentUserId === executorId) {\n      actionButton = (\n        <button onClick={() => updateStatus(\"accepted\")}>\n          Accept Order\n        </button>\n      );\n    } else {\n      message = \"Waiting for the service creator to accept the order.\";\n    }\n  } else if (currentStatus === \"accepted\") {\n    if (currentUserId === ordererId) {\n      actionButton = (\n        <button onClick={() => updateStatus(\"payed\")}>\n          Mark as Payed\n        </button>\n      );\n    } else {\n      message = \"Waiting for the orderer to mark the order as payed.\";\n    }\n  } else if (currentStatus === \"payed\") {\n    if (currentUserId === executorId) {\n      actionButton = (\n        <button onClick={() => updateStatus(\"sent\")}>\n          Mark as Sent\n        </button>\n      );\n    } else {\n      message = \"Waiting for the service creator to mark the order as sent.\";\n    }\n  } else if (currentStatus === \"sent\") {\n    if (currentUserId === ordererId) {\n      actionButton = (\n        <button onClick={() => updateStatus(\"recieved\")}>\n          Mark as Recieved\n        </button>\n      );\n    } else {\n      message = \"Waiting for the orderer to confirm receipt.\";\n    }\n  } else {\n    message = \"No further status updates available.\";\n  }\n\n  return (\n    <div>\n      <h3>Update Order Status</h3>\n      {actionButton ? actionButton : <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default OrderStatusUpdate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}